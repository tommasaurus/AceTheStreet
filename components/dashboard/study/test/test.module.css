.setupContainer {
  max-width: 600px;
  margin: 0 auto;
  padding: 2rem;
}

.setupTitle {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 2rem;
  text-align: center;
}

.setupForm {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.formGroup {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.questionTypes {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  background-color: hsl(var(--muted));
  border-radius: 8px;
}

:global(.dark) .questionTypes {
  background-color: hsl(var(--muted) / 0.4);
  border: 1px solid hsl(var(--muted) / 0.6);
}

.switchGroup {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 0.5rem;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.switchGroup:hover {
  background-color: hsl(var(--muted) / 0.5);
}

:global(.dark) .switchGroup:hover {
  background-color: hsl(var(--muted) / 0.8);
}

.startButton {
  margin-top: 1rem;
  width: 100%;
}

.testContainer {
  max-width: 800px;
  margin: 0 auto;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  position: relative;
  padding-bottom: 120px;
}

.timer {
  text-align: center;
  font-size: 2rem;
  font-weight: bold;
  color: #22c55e;
  margin-bottom: 2rem;
}

.timeProgress {
  width: 100%;
  height: 4px;
  background-color: hsl(var(--muted));
  border-radius: 2px;
  margin-top: 0.5rem;
  overflow: hidden;
}

.timeProgress::after {
  content: "";
  display: block;
  width: var(--progress);
  height: 100%;
  background-color: #22c55e;
  transition: width 1s linear;
}

.questionsContainer {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.questionCard {
  /* Light mode styles */
  background-color: white;
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  border-radius: 16px;
  padding: 2rem;
  margin-bottom: 2rem;
  transition: all 0.3s ease;
  animation: fadeIn 0.5s ease-out;
}

/* Dark mode styles */
:global(.dark) .questionCard {
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
}

/* Question text styling for light mode */
.questionText {
  font-size: 1.25rem;
  font-weight: 500;
  line-height: 1.6;
  margin-bottom: 2rem;
  color: #171717; /* Dark text for light mode */
}

/* Dark mode question text */
:global(.dark) .questionText {
  color: #f3f4f6;
}

/* Question number styling for light mode */
.questionNumber {
  color: #16a34a; /* Slightly darker green for better contrast in light mode */
  font-size: 0.9rem;
  font-weight: 500;
  margin-bottom: 1rem;
  opacity: 0.9;
  letter-spacing: 0.5px;
}

/* Dark mode question number */
:global(.dark) .questionNumber {
  color: #22c55e;
  opacity: 0.8;
}

/* Multiple Choice Styling */
.answerOptions {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  padding: 0.5rem;
}

.answerOption {
  position: relative;
  background: rgba(23, 23, 23, 0.05); /* Lighter background for light mode */
  border: 1px solid rgba(23, 23, 23, 0.1); /* Darker border for light mode */
  border-radius: 12px;
  padding: 1.5rem;
  cursor: grab;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  overflow: hidden;
  text-align: left;
  font-size: 1rem;
  line-height: 1.5;
  color: #171717; /* Dark text for light mode */
  user-select: none;
  touch-action: none; /* Add this to improve touch handling */
}

.answerOption:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.08);
}

.answerOption.selected {
  background: rgba(34, 197, 94, 0.1);
  border-color: rgba(34, 197, 94, 0.4);
  color: #15803d;
}

:global(.dark) .answerOption.selected {
  background: rgba(34, 197, 94, 0.2);
  border-color: rgba(34, 197, 94, 0.4);
  color: #22c55e;
}

/* Dark mode styles for answer options */
:global(.dark) .answerOption {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #f3f4f6;
}

/* Don't Know Button Styling */
.dontKnowContainer {
  width: 100%;
  display: flex;
  justify-content: center;
  margin-top: 2rem;
  position: relative;
}

/* True/False Styling */
.trueFalseOptions {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin: 2rem 0;
}

.trueFalseOption {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem 1.5rem;
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  min-width: 140px;
}

.trueFalseOption svg {
  width: 20px;
  height: 20px;
  transition: all 0.2s ease;
}

.trueFalseOption.match {
  color: #22c55e;
}

.trueFalseOption.dontMatch {
  color: #ef4444;
}

.trueFalseOption:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.08);
}

.trueFalseOption.selected {
  background: rgba(255, 255, 255, 0.1);
  border-color: currentColor;
}

.trueFalseOption.selected svg {
  transform: scale(1.2);
}

/* Add a subtle animation when hovering over the term/definition */
.term:hover,
.definition:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes shine {
  from {
    transform: translateX(-100%) rotate(45deg);
  }
  to {
    transform: translateX(100%) rotate(45deg);
  }
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4);
  }
  70% {
    box-shadow: 0 0 0 20px rgba(34, 197, 94, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0);
  }
}

/* Progress Bar */
.progressBar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: rgba(255, 255, 255, 0.1);
  z-index: 100;
}

.progressFill {
  height: 100%;
  background: linear-gradient(to right, #22c55e, #4ade80);
  transition: width 0.3s ease;
}

/* Timer */
.timer {
  position: fixed;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  padding: 0.75rem 1.5rem;
  border-radius: 9999px;
  font-size: 1.25rem;
  font-weight: 500;
  color: #22c55e;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.timer.warning {
  color: #f97316;
  animation: timerPulse 1s infinite;
}

@keyframes timerPulse {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.resultsContainer {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.resultsTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 3rem;
  background: linear-gradient(to right, #4461f2, #60a5fa);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.scoreCard {
  margin: 2rem 0;
  display: flex;
  justify-content: center;
}

.scoreCircle {
  background: linear-gradient(135deg, #4461f2 0%, #60a5fa 100%);
  border-radius: 50%;
  width: 200px;
  height: 200px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
  box-shadow: 0 8px 32px rgba(68, 97, 242, 0.2);
}

.scoreNumber {
  font-size: 4rem;
  font-weight: bold;
  line-height: 1;
  margin-bottom: 0.5rem;
}

.scoreLabel {
  font-size: 1.2rem;
  opacity: 0.9;
}

/* Add a glow effect for 100% score */
.scoreCircle[data-perfect="true"] {
  animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
  from {
    box-shadow: 0 0 20px -10px #4461f2;
  }
  to {
    box-shadow: 0 0 20px 10px #4461f2;
  }
}

.statsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1.5rem;
  margin-bottom: 3rem;
}

.statCard {
  background-color: hsl(var(--card));
  border: 1px solid hsl(var(--border));
  border-radius: 8px;
  padding: 1.5rem;
}

.statValue {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.statLabel {
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
}

.restartButton {
  font-size: 1.1rem;
  padding: 1rem 2rem;
}

.questionNumber {
  font-size: 1.1rem;
  font-weight: 600;
  color: #22c55e;
  margin-bottom: 1rem;
}

.matchGameIntro {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: calc(100vh - 200px);
  text-align: center;
  padding: 4rem 2rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

:global(.light) .matchGameIntro {
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.gameIcon {
  margin-bottom: 24px;
  perspective: 2000px;
  width: 120px;
  height: 120px;
  position: relative;
}

.iconGrid {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
  animation: rotate3d 8s linear infinite;
  transform-origin: center;
}

/* Create all 6 sides of the cube */
.iconCard {
  position: absolute;
  width: 100%;
  height: 100%;
  background: #1f2937;
  border: 3px solid #f3f4f6;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  font-weight: bold;
  color: white;
  transition: all 0.3s ease;
  backface-visibility: visible;
  box-shadow: 0 0 30px rgba(255, 255, 255, 0.15),
    0 0 60px rgba(74, 222, 128, 0.08), inset 0 0 20px rgba(255, 255, 255, 0.2);
}

/* Make the graduation cap icons bigger and add glow */
.iconCard svg {
  width: 32px;
  height: 32px;
  color: #f3f4f6;
  transition: transform 0.3s ease;
  filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.1));
}

/* Position each face of the cube */
.iconCard:nth-child(1) {
  transform: translateZ(60px);
}
.iconCard:nth-child(2) {
  transform: rotateY(180deg) translateZ(60px);
}
.iconCard:nth-child(3) {
  transform: rotateY(90deg) translateZ(60px);
}
.iconCard:nth-child(4) {
  transform: rotateY(-90deg) translateZ(60px);
}
.iconCard:nth-child(5) {
  transform: rotateX(90deg) translateZ(60px);
}
.iconCard:nth-child(6) {
  transform: rotateX(-90deg) translateZ(60px);
}

/* Enhanced glow effect in dark mode */
:global(.dark) .iconCard {
  background: #f3f4f6;
  border: 3px solid #1f2937;
  box-shadow: 0 0 40px rgba(255, 255, 255, 0.2),
    0 0 80px rgba(74, 222, 128, 0.1), inset 0 0 20px rgba(255, 255, 255, 0.25);
}

:global(.dark) .iconCard svg {
  color: #1f2937;
  filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.1));
}

/* Side faces need additional border styling */
.iconCard:nth-child(1),
.iconCard:nth-child(2),
.iconCard:nth-child(3),
.iconCard:nth-child(4),
.iconCard:nth-child(5),
.iconCard:nth-child(6) {
  border: 3px solid #f3f4f6;
  backface-visibility: hidden;
}

:global(.dark) .iconCard:nth-child(1),
:global(.dark) .iconCard:nth-child(2),
:global(.dark) .iconCard:nth-child(3),
:global(.dark) .iconCard:nth-child(4),
:global(.dark) .iconCard:nth-child(5),
:global(.dark) .iconCard:nth-child(6) {
  border: 3px solid #1f2937;
}

@keyframes rotate3d {
  0% {
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }
  100% {
    transform: rotateX(360deg) rotateY(720deg) rotateZ(360deg);
  }
}

/* Enhance the hover effects */
.gameIcon:hover .iconCard {
  box-shadow: 0 0 50px rgba(255, 255, 255, 0.2),
    0 0 100px rgba(74, 222, 128, 0.1);
}

:global(.dark) .gameIcon:hover .iconCard {
  box-shadow: 0 0 50px rgba(255, 255, 255, 0.25),
    0 0 100px rgba(74, 222, 128, 0.12);
}

.introText {
  display: flex;
  flex-direction: column;
  margin-bottom: 16px;
}

.gameDescription {
  font-size: 1.25rem;
  color: #4b5563;
  line-height: 1.6;
  max-width: 580px;
  margin: 16px auto;
}

:global(.dark) .gameDescription {
  color: #d1d5db;
}

.setupForm {
  max-width: 1000px; /* Increased from 800px */
  margin: 0 auto;
  padding: 4rem 2rem;
  scroll-margin-top: 2rem;
  width: 100%;
}

.readyText {
  font-size: 3rem;
  font-weight: bold;
  color: #1f2937;
  margin: 0;
}

:global(.dark) .readyText {
  color: #f3f4f6;
}

.testDescription {
  font-size: 1.25rem;
  color: #6b7280;
  line-height: 1.6;
  max-width: 600px;
  margin: 24px auto;
}

:global(.dark) .testDescription {
  color: #d1d5db;
}

.optionsContainer {
  width: 100%;
  max-width: 700px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 0 2rem; /* Add padding to maintain spacing on smaller screens */
}

.optionCard {
  background-color: hsl(var(--card));
  border: 1px solid hsl(var(--border));
  border-radius: 12px;
  padding: 2rem;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  width: 100%; /* Ensure full width */
}

.optionCard:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

:global(.dark) .optionCard {
  background-color: hsl(var(--card) / 0.3);
  border-color: hsl(var(--border) / 0.2);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

:global(.dark) .optionCard:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.optionTitle {
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: hsl(var(--foreground));
}

.numberInput {
  width: 100%;
  max-width: 500px; /* Add max-width for number inputs */
  height: 48px;
  font-size: 1.1rem;
  text-align: center;
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 8px;
  transition: all 0.2s ease;
  margin: 0 auto; /* Center the input */
  display: block; /* Ensure block display for margin auto to work */
}

.numberInput:focus {
  outline: none;
  border-color: #4461f2;
  box-shadow: 0 0 0 2px rgba(68, 97, 242, 0.2);
}

.maxQuestions {
  display: block;
  text-align: center;
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
  margin-top: 0.5rem;
}

.checkboxGroup {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.checkboxOption {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.checkboxOption:hover {
  background-color: hsl(var(--muted) / 0.3);
}

.checkboxLabel {
  font-size: 1rem;
  color: hsl(var(--foreground));
}

.startTestButton {
  height: 56px;
  font-size: 1.1rem;
  font-weight: 600;
  background: linear-gradient(to right, #4461f2, #60a5fa);
  border: none;
  margin-top: 1rem;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.startTestButton::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: 0.5s;
}

.startTestButton:hover::before {
  left: 100%;
}

:global(.dark) .startTestButton {
  color: white;
}

:global(.dark) .startTestButton:hover {
  box-shadow: 0 4px 12px rgba(68, 97, 242, 0.5);
}

@media (max-height: 700px) {
  .testSetupContainer {
    padding-top: 2rem;
    justify-content: flex-start;
  }

  .testIcon {
    margin-bottom: 16px;
  }

  .iconGrid {
    width: 100px;
    height: 100px;
  }

  .readyText {
    font-size: 2.5rem;
    margin-bottom: 8px;
  }

  .testDescription {
    font-size: 1.1rem;
    margin: 12px auto;
  }
}

/* Add styles for the time limit section */
.timeLimit {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.timeLimitInput {
  flex: 1;
}

.timeLimitUnit {
  color: hsl(var(--muted-foreground));
  font-size: 0.875rem;
}

/* Update the Configure Test button to match the match game animation */
.configureButton {
  /* Remove the gradient background */
  background: transparent;
  height: 56px;
  font-size: 1.1rem;
  font-weight: 600;
  border: none;
  border-radius: 8px;
  padding: 0 32px;
  cursor: pointer;
  margin-top: 1rem;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  opacity: 0; /* Start hidden */
  transform: translateY(20px); /* Start below final position */
  animation: fadeInUp 0.6s ease-out forwards;
  animation-delay: 0.2s; /* Add slight delay like match button */
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Add shine animation like match button */
.configureButton::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: 0.5s;
}

.configureButton:hover::before {
  left: 100%;
}

/* Remove duplicate hover effects */
.configureButton:hover {
  transform: translateY(-0.5px);
  box-shadow: 0 4px 12px rgba(68, 97, 242, 0.3);
}

/* Light mode styles */
.configureButton {
  color: #ffffff; /* White text for light mode */
  background-color: rgba(23, 23, 23, 0.9); /* Dark background for light mode */
}

/* Dark mode styles */
:global(.dark) .configureButton {
  color: #171717; /* Dark text for dark mode */
  background-color: rgba(
    255,
    255,
    255,
    0.9
  ); /* Light background for dark mode */
}

:global(.dark) .configureButton:hover {
  box-shadow: 0 4px 12px rgba(255, 255, 255, 0.2);
}

/* Active state */
.configureButton:active {
  transform: translateY(0);
}

/* Subtle hover effect for icons */
.iconCard:hover svg {
  transform: scale(1.1);
}

.navigationButtons {
  position: fixed;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  max-width: 800px;
  padding: 0 2rem;
  z-index: 10;
}

/* Center container for all buttons */
.navButtonsGroup {
  display: flex;
  gap: 2rem;
  align-items: center;
  margin-left: 4rem; /* Add this to shift buttons right */
}

/* Submit button styling update */
.submitButtonContainer {
  display: flex;
  align-items: center;
  margin: 0 1rem;
  height: 48px;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.submitButtonContainer.visible {
  opacity: 1;
  visibility: visible;
}

.submitButton {
  height: 48px;
  background: #22c55e;
  color: white;
  padding: 0 24px;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 500;
  transition: all 0.3s ease;
  white-space: nowrap;
  min-width: 120px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.navButton {
  height: 48px;
  padding: 0 24px;
  font-size: 1rem;
  font-weight: 500;
  border-radius: 8px;
  transition: all 0.3s ease;
  min-width: 120px;
  background: rgba(23, 23, 23, 0.9);
  border: 1px solid rgba(23, 23, 23, 0.1);
  color: white;
}

/* Dark mode styles for nav buttons */
:global(.dark) .navButton {
  background: rgba(255, 255, 255, 0.9); /* White background */
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #171717; /* Dark text */
}

/* Individual button hover effects */
.navButton:not(:disabled):hover {
  transform: translateY(-2px);
  background: rgba(23, 23, 23, 1);
}

:global(.dark) .navButton:not(:disabled):hover {
  background: white; /* Full white on hover */
  color: black; /* Black text on hover */
}

/* Disabled state */
.navButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.submitButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.dontKnowButton {
  border-radius: 8px;
  margin: 2rem auto 0;
  display: block;
  width: auto;
  min-width: 120px;
  height: 48px;
  padding: 0 1.5rem;
  font-size: 1rem;
  font-weight: 500;
  /* Light mode styles */
  background: rgba(23, 23, 23, 0.9);
  border: 1px solid rgba(23, 23, 23, 0.1);
  color: white;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Dark mode styles */
:global(.dark) .dontKnowButton {
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #171717;
}

.dontKnowButton:hover:not(:disabled) {
  transform: translateY(-2px);
  /* Update light mode hover */
  background: rgba(23, 23, 23, 0.8);
  color: white;
}

:global(.dark) .dontKnowButton:hover:not(:disabled) {
  background: white;
  color: black;
}

.dontKnowButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

/* Update revealed state styling */
.dontKnowButton.revealed {
  background: rgba(34, 197, 94, 0.1);
  border-color: rgba(34, 197, 94, 0.3);
  color: #22c55e;
  pointer-events: none;
}

.questionPair {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  margin: 2rem auto;
  width: 100%;
  max-width: 600px;
}

.term,
.definition {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  font-size: 1.1rem;
  line-height: 1.5;
  transition: all 0.3s ease;
}

/* Update styles for revealed answers */
.answerOption.revealed {
  background: rgba(34, 197, 94, 0.2);
  border-color: rgba(34, 197, 94, 0.4);
  color: #22c55e;
  font-weight: 500;
}

.trueFalseOption.revealed {
  background: rgba(34, 197, 94, 0.2);
  border-color: rgba(34, 197, 94, 0.4);
  color: #22c55e;
  font-weight: 500;
}

/* Update the don't know button when revealed */
.dontKnowButton.revealed {
  background: rgba(34, 197, 94, 0.1);
  border-color: rgba(34, 197, 94, 0.3);
  color: #22c55e;
  pointer-events: none;
}

/* Add a transition for smoother reveal effect */
.answerOption,
.trueFalseOption {
  transition: all 0.3s ease;
}

/* Update revealed state styling for dark mode */
:global(.dark) .dontKnowButton.revealed {
  background: rgba(255, 255, 255, 0.9);
  border-color: rgba(255, 255, 255, 0.1);
  color: #171717;
}

/* Add these styles for the Start New Test button */
.startNewTestButton {
  width: 100%;
  max-width: 400px;
  height: 48px;
  margin: 2rem auto;
  display: block;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  /* Light mode styles */
  background: rgba(23, 23, 23, 0.9);
  border: 1px solid rgba(23, 23, 23, 0.1);
  color: white;
  transition: all 0.3s ease;
}

/* Dark mode styles */
:global(.dark) .startNewTestButton {
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #171717;
}

.startNewTestButton:hover {
  transform: translateY(-2px);
  background: rgba(23, 23, 23, 1);
}

:global(.dark) .startNewTestButton:hover {
  background: white;
  color: black;
}

.answerOption:active {
  cursor: grabbing;
}

.dragging {
  opacity: 0.8;
  cursor: grabbing;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  transform: scale(1.05);
  background: hsl(var(--card));
  border: 1px solid hsl(var(--border));
  border-radius: 6px;
  padding: 0.75rem 1rem;
  pointer-events: none;
}
